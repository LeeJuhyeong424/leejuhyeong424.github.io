<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel><title>JHDevBlog</title><description>JHDevBlog는 Chirpy 테마, 라이믹스, CMS를 중심으로 개발 공부와 기록을 공유하는 블로그입니다.</description><link>https://leejuhyeong424.github.io/</link><atom:link href="https://leejuhyeong424.github.io/feed.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 16 Jan 2025 01:35:04 +0900</pubDate> <lastBuildDate>Thu, 16 Jan 2025 01:35:04 +0900</lastBuildDate> <generator>Jekyll v4.3.4</generator> <item><title>GitHub Blog 시리즈 3: GitHub Desktop 설치 및 주요 기능 이해하기</title><description>&lt;h2 id=&quot;github-desktop-소개&quot;&gt;GitHub Desktop 소개&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;GitHub Desktop&lt;/strong&gt;은 Git 사용을 위한 &lt;strong&gt;그래픽 사용자 인터페이스(GUI) 도구&lt;/strong&gt;로, GitHub에서 제공하는 프로젝트 관리와 협업을 보다 간편하게 수행할 수 있도록 합니다. &lt;strong&gt;CLI(Command Line Interface)&lt;/strong&gt;에서 Git 명령어를 직접 입력하는 대신, 클릭만으로 작업을 처리할 수 있어 Git 사용에 익숙하지 않거나 CLI 사용이 어려운 사용자에게 특히 유용한 도구입니다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;설치-방법&quot;&gt;설치 방법&lt;/h2&gt; &lt;h3 id=&quot;1-github-desktop-다운로드&quot;&gt;1. GitHub Desktop 다운로드&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/posts/github-blog-series-3/1.png&quot; alt=&quot;다운로드1&quot; /&gt; 먼저 &lt;a href=&quot;https://github.com/apps/desktop&quot;&gt;GitHub Desktop 공식 웹사이트&lt;/a&gt;에 접속하여 &lt;strong&gt;Download now&lt;/strong&gt; 버튼을 클릭합니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-3/2.png&quot; alt=&quot;다운로드2&quot; /&gt; &lt;strong&gt;Download for Windows (64bit)&lt;/strong&gt; 버튼을 눌러 GitHub Desktop을 다운로드합니다.&lt;/p&gt; &lt;h3 id=&quot;2-설치-실행&quot;&gt;2. 설치 실행&lt;/h3&gt; &lt;p&gt;GitHub Desktop 설치 파일은 다운로드 후 별도의 &lt;strong&gt;설치 과정 없이 바로 실행&lt;/strong&gt;됩니다. 프로그램은 자동으로 설치 및 실행되며, 추가적인 설정 없이 바로 사용할 수 있습니다. 따라서 파일을 다운로드한 후 곧바로 실행하시면 됩니다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;기본-설정-및-로그인&quot;&gt;기본 설정 및 로그인&lt;/h2&gt; &lt;p&gt;GitHub Desktop을 설치한 후, 이전 게시물에서 생성한 &lt;strong&gt;&lt;a href=&quot;https://leejuhyeong424.github.io/posts/github-blog-series-1/#github-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1&quot;&gt;GitHub 계정&lt;/a&gt;&lt;/strong&gt;으로 로그인합니다.&lt;br /&gt; 이 과정을 통해 GitHub와 GitHub Desktop 간에 저장소를 동기화할 수 있습니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-3/3.png&quot; alt=&quot;다운로드2&quot; /&gt; &lt;strong&gt;Sign in to GitHub.com&lt;/strong&gt;을 클릭하여 계정 로그인 창을 엽니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-3/4.png&quot; alt=&quot;다운로드2&quot; /&gt; 이전 게시물에서 생성한 &lt;strong&gt;&lt;a href=&quot;https://leejuhyeong424.github.io/posts/github-blog-series-1/#github-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1&quot;&gt;GitHub 계정&lt;/a&gt;&lt;/strong&gt;으로 로그인합니다.&lt;br /&gt; &lt;img src=&quot;/assets/img/posts/github-blog-series-3/5.png&quot; alt=&quot;다운로드2&quot; /&gt; &lt;strong&gt;Continue&lt;/strong&gt;를 눌러 다음 단계로 진행합니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-3/6.png&quot; alt=&quot;다운로드2&quot; /&gt; &lt;strong&gt;Authorize desktop&lt;/strong&gt;을 클릭하여 권한을 부여합니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-3/7.png&quot; alt=&quot;다운로드2&quot; /&gt; &lt;strong&gt;열기&lt;/strong&gt;를 선택하여 GitHub Desktop과 연동을 완료합니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-3/8.png&quot; alt=&quot;다운로드2&quot; /&gt; &lt;strong&gt;Finish&lt;/strong&gt;버튼을 눌러 설정을 완료합니다.&lt;/p&gt; &lt;p&gt;이 과정을 통해 GitHub와 GitHub Desktop 간에 저장소를 동기화할 수 있습니다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;주요-기능-및-사용법&quot;&gt;주요 기능 및 사용법&lt;/h2&gt; &lt;h3 id=&quot;저장소-복제cloning&quot;&gt;저장소 복제(Cloning)&lt;/h3&gt; &lt;p&gt;GitHub Desktop을 사용하여 GitHub에 있는 저장소를 로컬 컴퓨터로 쉽게 복제할 수 있습니다. &lt;strong&gt;“Clone a Repository”&lt;/strong&gt; 버튼을 클릭하고, 복제할 저장소의 URL을 입력하거나 GitHub 계정에서 원하는 저장소를 선택하면 됩니다. 이를 통해 로컬 환경에서 직접 코드 작업을 진행할 수 있습니다.&lt;/p&gt; &lt;h3 id=&quot;변경-사항-커밋commit&quot;&gt;변경 사항 커밋(Commit)&lt;/h3&gt; &lt;p&gt;로컬 파일을 수정한 후, GitHub Desktop을 사용하여 변경 사항을 쉽게 확인하고 &lt;strong&gt;커밋&lt;/strong&gt;할 수 있습니다. 변경된 파일을 선택하고 설명 메시지를 작성한 후, &lt;strong&gt;“Commit to main”&lt;/strong&gt; 버튼을 클릭하여 변경 사항을 저장합니다. 커밋은 코드의 현재 상태를 기록하는 중요한 스냅샷이므로, 각 변경 사항에 대해 명확하고 구체적인 설명을 남기는 것이 좋습니다.&lt;/p&gt; &lt;h3 id=&quot;푸시-및-풀push--pull&quot;&gt;푸시 및 풀(Push &amp;amp; Pull)&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Push&lt;/strong&gt;: 로컬의 변경 사항을 GitHub 원격 저장소에 반영하는 작업입니다. &lt;strong&gt;“Push origin”&lt;/strong&gt; 버튼을 사용하여 커밋된 변경 사항을 원격 저장소에 업로드할 수 있습니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pull&lt;/strong&gt;: 원격 저장소에 추가된 변경 사항을 로컬로 가져오는 작업입니다. &lt;strong&gt;“Fetch origin”&lt;/strong&gt; 또는 &lt;strong&gt;“Pull origin”&lt;/strong&gt; 버튼을 클릭하여 원격 저장소의 최신 변경 사항을 로컬 저장소에 반영할 수 있습니다. 이를 통해 팀원 간의 변경 사항을 최신 상태로 유지할 수 있습니다.&lt;/p&gt; &lt;h3 id=&quot;브랜치-관리branch-management&quot;&gt;브랜치 관리(Branch Management)&lt;/h3&gt; &lt;p&gt;새로운 기능을 개발하거나 버그를 수정하기 위해 &lt;strong&gt;브랜치(Branch)&lt;/strong&gt;를 사용하여 독립적으로 작업할 수 있습니다. &lt;strong&gt;“New Branch”&lt;/strong&gt; 버튼을 클릭하여 새로운 브랜치를 생성하고, 필요한 경우 다른 브랜치로 전환하여 작업을 병행할 수 있습니다. 작업이 완료되면 &lt;strong&gt;Merge&lt;/strong&gt; 기능을 사용해 변경 사항을 메인 브랜치에 병합합니다. 브랜치를 활용하면 팀 작업 간 충돌을 줄이고, 각각의 작업을 효율적으로 관리할 수 있습니다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h2 id=&quot;git-명령어와의-비교&quot;&gt;Git 명령어와의 비교&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;GitHub Desktop&lt;/strong&gt;은 Git을 더 직관적이고 시각적으로 사용할 수 있는 &lt;strong&gt;그래픽 사용자 인터페이스(GUI)&lt;/strong&gt;입니다. &lt;strong&gt;CLI(Command Line Interface)&lt;/strong&gt;에서 사용되는 Git 명령어 대신, 클릭만으로 작업을 수행할 수 있어 사용자 친화적이며 간편합니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CLI 환경의 Git&lt;/strong&gt;은 강력하고 세부적인 제어가 가능하지만, &lt;strong&gt;명령어&lt;/strong&gt; 입력이 필요한 만큼 숙련도를 요합니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;반면, &lt;strong&gt;GitHub Desktop&lt;/strong&gt;은 &lt;strong&gt;브랜치 관리, 커밋, 푸시&lt;/strong&gt;와 같은 주요 Git 작업을 GUI 환경에서 쉽게 처리할 수 있어 Git에 익숙하지 않은 사용자에게 적합합니다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;GitHub Desktop&lt;/strong&gt;은 시각적인 정보 제공 덕분에 여러 작업의 변경 사항을 쉽게 파악할 수 있고, Git 명령어의 사용을 최소화하여 &lt;strong&gt;작업의 복잡성을 줄이는 장점&lt;/strong&gt;이 있습니다. 하지만 고급 기능이나 복잡한 명령어 조합을 사용하는 경우에는 &lt;strong&gt;CLI Git&lt;/strong&gt;이 더 유리합니다.&lt;/p&gt; &lt;hr /&gt; </description><pubDate>Wed, 06 Nov 2024 00:00:00 +0900</pubDate><link>https://leejuhyeong424.github.io/posts/github-blog-series-3/</link><guid isPermaLink="true">https://leejuhyeong424.github.io/posts/github-blog-series-3/</guid> <category>GitHub Desktop</category> <category>GUI 도구</category> <category>Git 사용법</category> <category>Git vs CLI</category> <category>저장소 복제</category> <category>커밋 및 푸시</category> <category>브랜치 관리</category> <category>Git 연동</category> <category>개발 협업 도구</category> <category>블로그 제작</category> <category>개발 도구 사용법</category> </item> <item><title>GitHub Blog 시리즈 2: Git의 기본 개념과 주요 기능 이해하기</title><description>&lt;h2 id=&quot;git의-기본-개념&quot;&gt;Git의 기본 개념&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;은 &lt;strong&gt;분산 버전 관리 시스템&lt;/strong&gt;으로, 소프트웨어 개발 프로젝트에서 &lt;strong&gt;소스 코드의 변경 이력을 관리&lt;/strong&gt;하고,&lt;br /&gt; 여러 개발자가 동시에 작업할 수 있도록 돕습니다. Git을 사용하면 코드의 변경 사항을 기록하여,&lt;br /&gt; 오류 발생 시 &lt;strong&gt;이전 버전으로 쉽게 되돌아갈 수 있습니다.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Git의 주요 개념은 다음과 같습니다:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;저장소(Repository):&lt;/strong&gt; 코드와 관련 파일이 저장되는 공간으로, 모든 변경 이력을 관리합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;커밋(Commit):&lt;/strong&gt; 코드의 특정 상태를 기록하는 스냅샷으로, 변경 사항을 저장소에 반영합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;브랜치(Branch):&lt;/strong&gt; 독립적인 작업 공간으로, 여러 기능을 병행하여 개발할 수 있습니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;병합(Merge):&lt;/strong&gt; 서로 다른 브랜치를 통합하여 작업 결과를 반영합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;클론(Clone):&lt;/strong&gt; 원격 저장소를 복사하여 로컬에서 작업할 수 있게 하는 기능입니다.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;은 이러한 기능들을 통해 팀원 간 협업을 용이하게 하고, 코드의 안정성과 추적 가능성을 높입니다.&lt;br /&gt; 특히 &lt;strong&gt;GitHub&lt;/strong&gt;와 같은 플랫폼과 함께 사용하면 원격 저장소에서의 협업을 더욱 쉽게 진행할 수 있습니다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;git을-사용하는-이유&quot;&gt;Git을 사용하는 이유&lt;/h2&gt; &lt;p&gt;Git을 사용하면 프로젝트의 모든 변경 사항을 기록하고, 다양한 버전을 비교하고 병합 작업을 간단하게&lt;br /&gt; 수행할 수 있습니다. 또한, 팀원들과 동시에 여러 기능을 독립적으로 개발할 수 있어 협업에 큰 장점을 제공합니다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;git-설치-방법&quot;&gt;Git 설치 방법&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/posts/github-blog-series-2/1.png&quot; alt=&quot;페이지 접속&quot; /&gt; 먼저 &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git 페이지&lt;/a&gt;에 접속하여 &lt;strong&gt;Download for Windows&lt;/strong&gt; 버튼을 클릭합니다.&lt;br /&gt; &lt;img src=&quot;/assets/img/posts/github-blog-series-2/2.png&quot; alt=&quot;페이지 접속2&quot; /&gt; &lt;strong&gt;64-bit Git for Windows Setup&lt;/strong&gt;를 눌러 설치파일을 다운로드 합니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/3.png&quot; alt=&quot;설치이미지1&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/4.png&quot; alt=&quot;설치이미지2&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/5.png&quot; alt=&quot;설치이미지3&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/6.png&quot; alt=&quot;설치이미지4&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/7.png&quot; alt=&quot;설치이미지5&quot; /&gt; 기본 편집기를 사용해도 되지만, &lt;strong&gt;VSCode&lt;/strong&gt;를 주로 사용하신다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use Visual Studio Code as Git&apos;s default editor&lt;/code&gt; 옵션을 선택하는 것이 좋습니다. 이를 통해 Git에서 편집 작업을 할 때 VSCode가 자동으로 열리게 됩니다.&lt;br /&gt; 만약 아직 VSCode가 설치되어 있지 않다면, &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code 공식 사이트&lt;/a&gt;에 접속하여 설치를 진행해 주세요.&lt;br /&gt; 이를 통해 더 편리하게 Git과 통합하여 사용할 수 있습니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/8.png&quot; alt=&quot;설치이미지6&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/9.png&quot; alt=&quot;설치이미지7&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/10.png&quot; alt=&quot;설치이미지8&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/11.png&quot; alt=&quot;설치이미지9&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/12.png&quot; alt=&quot;설치이미지10&quot; /&gt; 기본값을 선택해도 되지만, &lt;strong&gt;PowerShell&lt;/strong&gt; 화면이 더 편하신 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use Windows&apos; default console window&lt;/code&gt; 옵션을 선택하는 것이 좋습니다. 이렇게 하면 Git Bash 대신 Windows의 기본 콘솔인 PowerShell을 사용할 수 있게 됩니다.&lt;br /&gt; 이 설정은 Git 명령을 수행할 때 더 익숙한 환경을 제공해 작업을 편리하게 진행할 수 있도록 도와줍니다. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/13.png&quot; alt=&quot;설치이미지11&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/14.png&quot; alt=&quot;설치이미지12&quot; /&gt; &lt;strong&gt;Next&lt;/strong&gt; 버튼을 클릭하여 다음 단계로 진행하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/15.png&quot; alt=&quot;설치이미지13&quot; /&gt; “Next” 버튼을 클릭한 후, 설정이 완료되면 &lt;strong&gt;Install&lt;/strong&gt; 버튼을 눌러 설치를 시작하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/16.png&quot; alt=&quot;설치이미지14&quot; /&gt; &lt;strong&gt;Launch Git Bash&lt;/strong&gt; 옵션을 선택하고, &lt;strong&gt;View Release Notes&lt;/strong&gt; 옵션은 해제한 후 Finish 버튼을 눌러 설치를 마무리하세요. &lt;img src=&quot;/assets/img/posts/github-blog-series-2/17.png&quot; alt=&quot;설치이미지15&quot; /&gt;&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위 명령어를 입력하여 설치가 정상적으로 완료되었는지 확인합니다.&lt;br /&gt; 다음으로 사용자 이름과 이메일을 설정합니다. 이 정보는 커밋 시 기록되는 사용자 정보로 사용됩니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;Your Name&quot;&lt;/span&gt; git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;youremail@example.com&quot;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;hr /&gt; &lt;h2 id=&quot;git의-기본-명령어-사용법&quot;&gt;Git의 기본 명령어 사용법&lt;/h2&gt; &lt;p&gt;이 명령어들은 Git을 사용하면서 가장 기본적이고 자주 사용되는 기능들입니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;git init:&lt;/strong&gt; 새로운 Git 저장소를 초기화합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git clone [URL]:&lt;/strong&gt; 원격 저장소를 로컬로 복사해옵니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git add [파일명]:&lt;/strong&gt; 파일을 스테이지 영역에 추가합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git commit -m “메시지”:&lt;/strong&gt; 변경 사항을 커밋하고 메시지를 추가합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git status:&lt;/strong&gt; 현재 저장소의 상태를 확인합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git push:&lt;/strong&gt; 로컬 커밋을 원격 저장소로 업로드합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git pull:&lt;/strong&gt; 원격 저장소에서 최신 변경 사항을 가져옵니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git branch:&lt;/strong&gt; 브랜치를 확인하거나 생성합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git checkout [브랜치명]:&lt;/strong&gt; 브랜치를 전환합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;git merge [브랜치명]:&lt;/strong&gt; 다른 브랜치의 변경 사항을 병합합니다.&lt;br /&gt; 이 명령어들을 통해 Git을 사용한 코드 관리 및 협업을 효과적으로 할 수 있습니다.&lt;br /&gt; 각 명령어의 사용법에 익숙해지면 Git 활용이 더욱 수월해질 것입니다.&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; </description><pubDate>Mon, 04 Nov 2024 00:00:00 +0900</pubDate><link>https://leejuhyeong424.github.io/posts/github-blog-series-2/</link><guid isPermaLink="true">https://leejuhyeong424.github.io/posts/github-blog-series-2/</guid> <category>Git 설치</category> <category>Git 기본 명령어</category> <category>버전 관리</category> <category>개발 환경 설정</category> <category>Git 튜토리얼</category> <category>블로그 제작</category> <category>개발 도구 사용법</category> </item> <item><title>GitHub Blog 시리즈 1: 계정 생성 및 기본 개념 이해하기</title><description>&lt;p&gt;이 블로그는 &lt;strong&gt;GitHub Pages&lt;/strong&gt;와 &lt;em&gt;chirpy 테마&lt;/em&gt;를 이용하여 만들어졌습니다.&lt;br /&gt; &lt;strong&gt;GitHub&lt;/strong&gt;를 사용하면 &lt;strong&gt;누구나&lt;/strong&gt; 손쉽게 자신의 웹사이트를 구축하고 관리할 수 있는데, 저도 이 도구를 활용하여 첫 블로그를 시작하게 되었습니다.&lt;/p&gt; &lt;p&gt;이번 글에서는 &lt;strong&gt;GitHub의 기본 개념&lt;/strong&gt;부터 &lt;strong&gt;주요 기능&lt;/strong&gt;, 그리고 실제로 &lt;strong&gt;계정을 생성하는 방법&lt;/strong&gt;까지 단계별로 안내해드리겠습니다.&lt;br /&gt; 이 과정을 통해 여러분도 &lt;u&gt;chirpy 테마&lt;/u&gt;와 같은 블로그를 직접 만들어 보실 수 있을 것입니다.&lt;/p&gt; &lt;p&gt;이제 함께 시작해볼까요?&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;github란&quot;&gt;GitHub란?&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;는 개발자들이 소스 코드와 프로젝트 파일을 저장하고 협업할 수 있는 웹 기반 플랫폼 입니다. &lt;strong&gt;Git&lt;/strong&gt;이라는 분산 버전 관리 시스템을 사용해 코드의 변경 이력을 관리하고, 팀원이 함께 작업할 수 있도록 돕습니다. 이를 통해 개발자들은 프로젝트의 모든 변화를 추적하고 버전을 관리하며, 다른 사람들과 효율적으로 협력할 수 있습니다. &lt;strong&gt;GitHub&lt;/strong&gt;는 오픈소스 프로젝트부터 개인 프로젝트 까지 다양한 프로젝트 관리에 필수적인 도구로 자리 잡고 있습니다.&lt;/p&gt; &lt;p&gt;또한, &lt;strong&gt;GitHubPages&lt;/strong&gt;와 같은 서비스를 이용하면 손쉽게 웹사이트나 블로그를 무료로 배포할 수 있어 개발자뿐만 아니라 비개발자에게도 유용한 기능을 제공합니다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;github-사용장점&quot;&gt;GitHub 사용장점&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;협업 용이성&lt;/strong&gt;: 여러 개발자가 동시에 코드를 작성하고 변경 사항을 &lt;strong&gt;효율적으로 추적&lt;/strong&gt;할 수 있는 &lt;strong&gt;강력한 협업 도구&lt;/strong&gt;입니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;버전 관리&lt;/strong&gt;: &lt;strong&gt;Git 기반&lt;/strong&gt;으로 코드의 변경 이력을 &lt;strong&gt;쉽게 관리&lt;/strong&gt;하고, 필요 시 &lt;strong&gt;과거 버전으로 되돌아갈 수 있는&lt;/strong&gt; 기능을 제공합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;오픈소스 참여&lt;/strong&gt;: 많은 오픈소스 프로젝트가 GitHub에 &lt;strong&gt;공개&lt;/strong&gt;되어 있어 누구나 &lt;strong&gt;기여하고 학습&lt;/strong&gt;할 수 있는 기회를 제공합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;: &lt;strong&gt;정적 웹사이트&lt;/strong&gt;를 간편하게 배포할 수 있어 &lt;strong&gt;블로그나 포트폴리오&lt;/strong&gt; 제작에 &lt;strong&gt;유용&lt;/strong&gt;합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;커뮤니티와 네트워킹&lt;/strong&gt;: 다양한 개발자들과 소통하며 &lt;strong&gt;피드백&lt;/strong&gt;을 받을 수 있는 &lt;strong&gt;플랫폼&lt;/strong&gt;입니다.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;이러한 장점 덕분에 GitHub는 &lt;strong&gt;개발자뿐만 아니라 다양한 사용자&lt;/strong&gt;들에게도 &lt;strong&gt;프로젝트 관리와 협업&lt;/strong&gt;을 위한 &lt;strong&gt;필수 도구&lt;/strong&gt;로 자리 잡고 있습니다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;github-계정-생성&quot;&gt;GitHub 계정 생성&lt;/h2&gt; &lt;h3 id=&quot;페이지-접속&quot;&gt;페이지 접속&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/posts/github-blog-series-1/1.png&quot; alt=&quot;페이지 접속&quot; /&gt; 먼저 &lt;a href=&quot;https://github.com&quot;&gt;GitHub 페이지&lt;/a&gt;에 접속합니다. 상단의 &lt;strong&gt;Sign Up&lt;/strong&gt; 버튼을 클릭해 시작합니다.&lt;/p&gt; &lt;h3 id=&quot;기본정보-입력&quot;&gt;기본정보 입력&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/posts/github-blog-series-1/2.png&quot; alt=&quot;기본정보 입력&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;이메일 주소&lt;/strong&gt;: 주로 사용하는 이메일을 입력합니다. 이메일을 통해 알림 및 계정 복구가 이루어집니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;비밀번호&lt;/strong&gt;: 강력한 비밀번호를 입력해 보안을 강화합니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;사용자 이름&lt;/strong&gt;: GitHub에서 사용할 고유한 이름을 선택합니다. 다른 사람들과 구분되며 쉽게 기억할 수 있는 이름이 좋습니다.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Captcha 인증&lt;/strong&gt;: Continue를 눌러 CAPTCHA 인증을 진행하여 로봇이 아님을 확인합니다.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;이메일-인증-완료&quot;&gt;이메일 인증 완료&lt;/h3&gt; &lt;p&gt;가입 후, 입력한 이메일 주소로 인증 메일이 발송됩니다.&lt;br /&gt; 이메일을 열어 인증코드 6자리를 확인후 입력하여 계정을 활성화 하세요.&lt;/p&gt; &lt;h3 id=&quot;프로필-설정-및-개인화-정보&quot;&gt;프로필 설정 및 개인화 정보&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/posts/github-blog-series-1/3.png&quot; alt=&quot;프로필 설정 및 개인화 정보&quot; /&gt; 활성화된 계정 로그인 후 &lt;strong&gt;Skip personalization&lt;/strong&gt; 옵션으로 초기 설정 단계를 건너뛸 수 있지만,&lt;br /&gt; 프로필 설정을 통해 &lt;strong&gt;사용자 소개&lt;/strong&gt;와 &lt;strong&gt;프로필 이미지&lt;/strong&gt;를 추가하면 향후 협업에 도움이 됩니다.&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;이번 글을 통해 &lt;strong&gt;GitHub&lt;/strong&gt;의 기본 개념부터 계정 생성 및 활용 방법까지 살펴보았습니다. GitHub는 소스 코드 관리, 협업, 오픈소스 참여, 그리고 GitHub Pages를 통한 웹사이트 배포 등 &lt;strong&gt;다양한 기능을 제공하는 강력한 플랫폼&lt;/strong&gt;입니다. 이 모든 기능은 &lt;strong&gt;개발자뿐만 아니라 비개발자에게도 유용&lt;/strong&gt;하며, 여러분의 프로젝트를 효과적으로 관리하고 성장시키는 데 큰 도움이 될 것입니다.&lt;/p&gt; &lt;p&gt;이제 여러분도 GitHub를 활용해 &lt;strong&gt;자신만의 프로젝트와 블로그를 만들어&lt;/strong&gt; 보세요. 궁금한 점이나 추가로 다루었으면 하는 내용이 있다면 언제든지 댓글 작성해주시기 바랍니다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;다음 글에서는 Git의 기본 개념과 주요 기능에 대해 다룰 예정&lt;/strong&gt;입니다. Git을 사용하여 버전 관리를 효율적으로 수행하는 방법과 기본적인 명령어들을 살펴볼 예정이니, 많은 기대 부탁드립니다!&lt;/p&gt; </description><pubDate>Sun, 03 Nov 2024 02:42:00 +0900</pubDate><link>https://leejuhyeong424.github.io/posts/github-blog-series-1/</link><guid isPermaLink="true">https://leejuhyeong424.github.io/posts/github-blog-series-1/</guid> <category>GitHub</category> <category>Git</category> <category>오픈소스</category> <category>GitHub Pages</category> <category>블로그 제작</category> <category>버전 관리</category> <category>협업</category> <category>블로그 제작</category> <category>GitHub 사용법</category> </item> <item><title>GitHub Blog 시리즈: 모든 게시글 모음</title><description> </description><pubDate>Fri, 01 Nov 2024 00:00:00 +0900</pubDate><link>https://leejuhyeong424.github.io/posts/github-blog-series/</link><guid isPermaLink="true">https://leejuhyeong424.github.io/posts/github-blog-series/</guid> <category>블로그 제작</category> </item> <item><title>첫 게시물</title><description>&lt;p&gt;안녕하세요, JHDevBlog 블로그를 운영하는 이주형(쭈꾸미)입니다. 앞으로 많은 관심과 성원 부탁드립니다.&lt;/p&gt; &lt;p&gt;저는 나만의 웹사이트를 만들기 위해 여러 자료를 조사하던 중, GitHub에 대해 알게 되었고, 그 과정에서 GitHub Pages라는 호스팅 서비스를 발견하게 되었습니다. 현재 이 블로그는 해당 플랫폼을 통해 운영되고 있습니다.&lt;/p&gt; &lt;p&gt;이 블로그는 Chirpy 테마, Rhymix, CMS 등을 중심으로 개발 공부와 다양한 기록을 공유하는 공간입니다.&lt;/p&gt; &lt;p&gt;앞으로는 다양한 개발 관련 주제 및 기타 학습 내용을 다룰 예정입니다.&lt;/p&gt; &lt;p&gt;이 사이트는 처음 운영하는 블로그로, 여러 면에서 부족하고 실수가 있을 수 있습니다. 그러므로, 여러분의 많은 관심과 피드백을 부탁드립니다.&lt;/p&gt; &lt;p&gt;이 글을 시작으로 블로그 운영을 본격적으로 시작하겠습니다.&lt;/p&gt; &lt;p&gt;감사합니다.&lt;/p&gt; </description><pubDate>Thu, 31 Oct 2024 21:00:00 +0900</pubDate><link>https://leejuhyeong424.github.io/posts/First-Post/</link><guid isPermaLink="true">https://leejuhyeong424.github.io/posts/First-Post/</guid> <category>Chirpy</category> <category>GitHub</category> <category>GitHub Pages</category> <category>Rhymix</category> <category>블로그 운영</category> <category>개발 학습</category> <category>블로그 시작</category> <category>개발</category> </item> </channel> </rss>
